import torch
import torch.nn as nn
from mmcv.cnn import ConvModule

from mmseg.ops import Upsample
from ..builder import HEADS
from .decode_head import BaseDecodeHead

import torch
import warnings
import math
from einops import rearrange

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""refer to timm.models.layers.weight_init.py
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def init_weights(m):
    if isinstance(m, nn.Linear):
        trunc_normal_(m.weight, std=0.02)
        if isinstance(m, nn.Linear) and m.bias is not None:
            nn.init.constant_(m.bias, 0)
    elif isinstance(m, nn.LayerNorm):
        nn.init.constant_(m.bias, 0)
        nn.init.constant_(m.weight, 1.0)

@HEADS.register_module()
class MySegmenterHead_Linear(BaseDecodeHead):
    def __init__(self, d_encoder, **kwargs):
        super(MySegmenterHead_Linear, self).__init__(input_transform=None, **kwargs)
        self.d_encoder = d_encoder
        self.head = nn.Linear(self.d_encoder, self.num_classes)
        self.apply(init_weights)

    def forward(self, inputs):
        x = self._transform_inputs(inputs)
        GS = x.shape[-1]; #print('x.shape in head in: ', x.shape)

        x = rearrange(x, "b n h w -> b (h w) n")
        # print('x.shape in head reannage: ', x.shape)
        x = self.head(x)
        x = rearrange(x, "b (h w) c -> b c h w", h=GS)

        # print('masks.shape: ', x.shape)
        return x